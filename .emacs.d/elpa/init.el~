;;; ================================================================
;;; load-pathを追加する関数を定義
;;; ================================================================
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
	      (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))
;; 引数のディレクトリとそのサブディレクトリをload-pathに追加
(add-to-load-path "elpa")

;;; ================================================================
;;; shift+→等でバッファの任意方向への移動
;;; ================================================================
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <down>")  'windmove-down)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <right>") 'windmove-right)

;;; ================================================================
;;; yatex-mode
;;; ================================================================
(setq load-path
    (append '("~usr/share/emacs24/site-lisp/yatex") load-path))
(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq dvi2-command "xdvi"
    tex-command "platex"
    dviprint-command-format "dvips %s | lpr"
    YaTeX-kanji-code nil)
;; *.texの拡張子をもつファイルを開いた場合、自動的にyatexを起動
(setq auto-mode-alist
    (cons (cons "\\.tex$" 'yatex-mode) auto-mode-alist))

;; 日本語使う人はこの設定にするとよいらしいです
(setq latex-math-preview-tex-to-png-for-preview '(platex dvipng))
(setq latex-math-preview-tex-to-png-for-save '(platex dvipng))
(setq latex-math-preview-tex-to-eps-for-save '(platex dvips-to-eps))
(setq latex-math-preview-beamer-to-png '(platex dvipdfmx gs-to-png))

;;; ================================================================
;;; 行と桁の表示
;;; ================================================================
(line-number-mode t)
(column-number-mode t)
;; 選択範囲の情報表示
(defun count-lines-and-chars ()
  (if mark-active
      (format "[%3d:%4d]"
              (count-lines (region-beginning) (region-end))
              (- (region-end) (region-beginning)))
    ""))
(add-to-list 'default-mode-line-format
             '(:eval (count-lines-and-chars)))

;;; ================================================================
;;; 背景色:白→黒
;;; ================================================================
(custom-set-faces
 '(default ((t
             (:background "black" :foreground "white")
             ))))

;;; ================================================================
;;; C-h→バックスペース
;;; ================================================================
(keyboard-translate ?\C-h ?\C-?)

;;; ================================================================
;;; 辞書機能
;;; ================================================================
(global-set-key (kbd "C-c w") 'sdic-describe-word)
(global-set-key (kbd "C-c W") 'sdic-describe-word-at-point)

;;; ================================================================
;;; enabling markdown-mode
;;; ================================================================
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(setq auto-mode-alist 
	(cons '("\\.md$" . markdown-mode) auto-mode-alist))
(add-hook 'markdown-mode-hook 'flyspell-mode)

;;; ================================================================
;;; auto-complete
;;; ================================================================
(when (require 'auto-complete-config nil t)
  (add-to-list 'ac-dictionary-directories
	       "~/.emacs.d/ac-dict")
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (ac-config-default))

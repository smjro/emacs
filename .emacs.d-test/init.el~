;;; ========================================
;;; ロードパスの追加
;;;  ========================================
;; load-pathを追加する関数を定義
;; サブディレクトリを追加するため
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
	      (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))

;; 引数のディレクトリとそのサブディレクトリをload-pathに追加
(add-to-load-path "elisp" "conf" "public_repos")

;; ========================================
;; パッケージの読み込み
;; ========================================
(require 'package) ; package.elを有効化
;; パッケージリポジトリにMarmaladeとMELPAを追加
(add-to-list
 'package-archives
 '("marmalade" . "https://marmalade-repo.org/packages/"))
(add-to-list
 'package-archives
 '("melpa" . "https://melpa.org/packages/"))
(package-initialize) ; インストール済みのElispを読み込む

;; ========================================
;; テーマを変更
;; ========================================
(load-theme 'misterioso t)

;; ========================================
;; インデントにタブを使用しない
;; ========================================
(setq-default indent-tabs-mode nil)

;; ========================================
;; キーバインドの割り当て
;; ========================================
;; C-hをバックスペースにする
(define-key key-translation-map (kbd "C-h")(kbd "<DEL>"))
;; C-x ?をヘルプにする
(define-key global-map (kbd "C-x ?") 'help-command)
;; C-jをマーキングコマンドにする
(define-key global-map (kbd "C-j") 'set-mark-command)
;; 行の折り返し表示を切り替える
(define-key global-map (kbd "C-c l") 'toggle-truncate-lines)
;; C-tでウィンドウ切替
(define-key global-map (kbd "C-t") 'other-window)

;; ========================================
;; 起動メッセージの非表示
;; ========================================
(setq inhibit-startup-message t)

;; ========================================
;; 行番号／カラム番号の表示
;; ========================================
;; モードラインにカラム番号を表示
(column-number-mode t)
;; モードラインの行番号を表示
(line-number-mode t)
;; 行番号の表示
;; (global-linum-mode)
(global-display-line-numbers-mode)

;; ========================================
;; リージョン内の行数と文字数表示
;; ========================================
(defun count-lines-and-chars ()
  (if mark-active
      (format "[%3d,%4d] "
	      (count-lines (region-beginning) (region-end))
	      (- (region-end) (region-beginning)))
    ""))
(add-to-list 'default-mode-line-format
	     '(:eval (count-lines-and-chars)))

;; ========================================
;; モードラインに各種情報を表示
;; ========================================
;; 時間表示(曜日・月・日表示)
(setq display-time-day-and-date t)
(display-time-mode t)

;; ========================================
;; タイトルバーにファイルのフルパスを表示
;; ========================================
(setq frame-title-format "%f")

;; ========================================
;; フェイスの表示・装飾
;; ========================================
;; リージョンの背景色を変更
(set-face-background 'region "darkgreen")

;; ========================================
;; ハイライト
;; ========================================
;; paren-mode: 対応する括弧を強調して表示
(setq show-paren-delay 0) ; 表示までの秒数。初期値0.125
(show-paren-mode t) ; 有効化

;; ========================================
;; バックアップ
;; ========================================
;; バックアップとオートセーブファイルを
;; ~/.emacs.d/backups/に集める
(add-to-list 'backup-directory-alist
	     (cons "." "~/.emacs.d/backups/"))
(setq auto-save-file-name-transforms
;; オートセーブファイル作成
      `((".*",(expand-file-name "~/.emacs.d/backups/") t)))
;; オートセーブファイル作成までの秒間隔
(setq auto-save-timeout 30)
;; オートセーブファイル作成までのタイプ間隔
(setq auto-save-interval 60)

;; ========================================
;; auto complete
;; ========================================
;; auto-completeの設定
(when (require 'auto-complete-config nil t)
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (ac-config-default)
  (setq ac-use-menu-map t)
  (setq ac-ignore-case nil))

;; ========================================
;; helm
;; ========================================
(require 'helm-config)
;; M-yで過去の履歴から貼り付け可能にする
(define-key global-map (kbd "M-y") 'helm-show-kill-ring)

;; ========================================
;; helm-descbinds
;; ========================================
(require 'helm-descbinds)
(helm-descbinds-mode)

;; ========================================
;; helm-c-moccur
;; ========================================
;; (when (require 'helm-c-moccur nil t)
;;   (setq
;;    helm-idle-delay 0.1
;;    ;; helm-c-moccur用
;;    helm-c-moccur-helm-idle-delay 0.1
;;    ;; バッファの情報をハイライト
;;    helm-c-moccur-higligt-info-line-flag t
;;    ;; 現在選択中の候補の位置を他のwindowに表示する
;;    helm-c-moccur-enable-auto-look-flag t
;;    ;; 起動時にポイントの位置の単語を初期パターンにする
;;    helm-c-moccur-enable-initial-pattern t)
;;   ;; C-M-oにhelm-c-moccur-occur-by-moccurを割り当てる
;;   (global-set-key (kbd "C-M-o") 'helm-c-moccur-occur-by-moccur))

;; ========================================
;; color-moccur
;; ========================================
(when (require 'color-moccur nil t)
  ;; M-oにoccur-by-moccurを割り当て
  (define-key global-map (kbd "M-o") 'occur-by-moccur)
  ;; スペース区切りでAND検索
  (setq moccur-split-word t)
  ;; ディレクトリ検索のとき除外するファイル
  (add-to-list 'dmoccur-exclusion-mask "\\.DS_Store")
  (add-to-list 'dmoccur-exclusion-mask "^#.+#$"))

;; ========================================
;; moccur-edit
;; ========================================
(require 'moccur-edit nil t)
;; moccur-edit-finish-editと同時にファイルを保存
(defadvice moccur-edit-change-file
    (after save-after-moccur-edit-buffer activate)
  (save-buffer))

;; ========================================
;; wgrep
;; ========================================
(require 'wgrep nil t)

;; ========================================
;; undohist
;; ========================================
(when (require 'undohist nil t)
  (undohist-initialize))

;; ========================================
;; undo-tree
;; ========================================
(when (require 'undo-tree nil t)
  (define-key global-map (kbd "C-'") 'undo-tree-redo)
  (global-undo-tree-mode))

;; ========================================
;; スクロール
;; ========================================
;; 1行ずつスクロール
(setq scroll-conservatively 35
      scroll-margin 5
      scroll-step 1)
(setq comint-scroll-show-maximum-output t)
;; スクロール時のカーソル位置の維持
(setq scroll-preserve-screen-position t)
;; ホイールでスクロールする行数を設定
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))

;; ========================================
;; 閉じ括弧の自動挿入
;; ========================================
(electric-pair-mode t)

;; ========================================
;; python-mode
;; ========================================
(setq python-check-command "pep8")

;; ========================================
;; Flycheck
;; ========================================
;; (add-hook 'after-init-hook #'global-flycheck-mode)
;; (with-eval-after-load 'flycheck
;;   (flycheck-pos-tip-mode))
